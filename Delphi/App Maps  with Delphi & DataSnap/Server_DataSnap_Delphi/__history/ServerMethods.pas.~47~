unit ServerMethods;

interface

uses System.SysUtils, System.Classes, System.Json,
    DataSnap.DSProviderDataModuleAdapter,
    Datasnap.DSServer, Datasnap.DSAuth, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.MySQL,
  FireDAC.Phys.MySQLDef, FireDAC.VCLUI.Wait, Data.DB, FireDAC.Comp.Client,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Comp.DataSet, FireDAC.Stan.StorageJSON, uConnectionDB, uServerLib, Data.FireDACJSONReflect;

type
  TServerMethods1 = class(TDSServerModule)
    Driver: TFDPhysMySQLDriverLink;
    JsonLink: TFDStanStorageJSONLink;
    procedure DSServerModuleCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }

    //Client methods
    function ValidateUser(sName, sPassword: string): TJSONObject;
    function AddNewUser(Name, Email, PassWord: String): Boolean;
    function LoadUser(iID: Integer): TFDJSONDataSets;

    function DataSetToJSON(oDataSet : TDataset) : TJSONObject;

  end;


implementation

{$R *.dfm}

uses System.StrUtils, uClient;

var
  ConnectionDB: TConnectionDB;
  Client: TClient;

function TServerMethods1.AddNewUser(Name, Email, PassWord: String): Boolean;
begin
  Client.AddNewUser(Name, Email, PassWord);
end;

function TServerMethods1.DataSetToJSON(oDataSet: TDataset): TJSONObject;
Var
	i : Integer;
begin
	Result := TJSONObject.Create;

  for i := 0 to oDataSet.FieldCount - 1 do
    Result.AddPair(oDataSet.Fields[i].FieldName,TJSONString.Create(oDataSet.Fields[i].AsString));


end;

procedure TServerMethods1.DSServerModuleCreate(Sender: TObject);
begin
  ConnectionDB := TConnectionDB.Create;
  Client := TClient.Create(ConnectionDB.Connection);
end;


function TServerMethods1.LoadUser(iID: Integer): TFDJSONDataSets;
begin
  Result := TFDJSONDataSets.Create;

  TFDJSONDataSetsWriter.ListAdd(Result,Client.LoadUser(iID));
end;

function TServerMethods1.ValidateUser(sName, sPassword: string): TJSONObject;
begin
  Result := DataSetToJSON(Client.SearchUser(sName,sPassword));
end;

end.

